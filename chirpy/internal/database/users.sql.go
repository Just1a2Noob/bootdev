// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteUserWithEmail = `-- name: DeleteUserWithEmail :exec
DELETE FROM users 
WHERE email = $1
`

func (q *Queries) DeleteUserWithEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUserWithEmail, email)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const searchUser = `-- name: SearchUser :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users
WHERE email = $1
`

func (q *Queries) SearchUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, searchUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const searchUserWithID = `-- name: SearchUserWithID :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users
WHERE id = $1
`

func (q *Queries) SearchUserWithID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, searchUserWithID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const setChirpyRed = `-- name: SetChirpyRed :exec
UPDATE users 
SET is_chirpy_red = $2
WHERE id = $1
`

type SetChirpyRedParams struct {
	ID          uuid.UUID
	IsChirpyRed string
}

func (q *Queries) SetChirpyRed(ctx context.Context, arg SetChirpyRedParams) error {
	_, err := q.db.ExecContext(ctx, setChirpyRed, arg.ID, arg.IsChirpyRed)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET email = $2, hashed_password = $3, updated_at = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
	UpdatedAt      time.Time
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.HashedPassword,
		arg.UpdatedAt,
	)
	return err
}
